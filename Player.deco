; # start tablegen
	TSTO #6
	BOV stack..overflow_error
	ADDSP #2
	LEA 1(GB), R1
	BSR classTableInit.Object
	LOAD #null, R1
	STORE R1, 1(GB)
; ------------------ Imports Main ---------------------
; ---------------- End Imports Main -------------------
	ADDSP #3
	LEA 3(GB), R1
	BSR classTableInit.Player
	LEA 1(GB), R1
	STORE R1, 3(GB)
	BRA classTableInit_end
; ---------------------------------------------------
;     Construction tables des methodes
; ---------------------------------------------------
; -------------------- Object -----------------------
classTableInit.Object:
	LOAD methodBody.Object.equals, R0
	STORE R0, 1(R1)
	RTS
; ------------------- Imports Fn ----------------------
; ----------------- End Imports Fn --------------------
; ----------------------------------------
; Player
classTableInit.Player:
	BSR classTableInit.Object
	LOAD methodBody.Player.changePlayer, R0
	STORE R0, 2(R1)
	RTS
classTableInit_end:
; # end tablegen
; # start main
; max size stack: 0 offset: 0
	TSTO #0
	BOV stack..overflow_error
; Leave space for local vars
	ADDSP #0
; Main program
; ----- Main is empty -----
	HALT
; # end main
; # start Object
; -------------------------------------------------
;                   Classe Object
; -------------------------------------------------
init.Object:
; ----------- Initialisation des champs de Object
	LOAD -2(LB), R1
	LEA 1(GB), R0
	STORE R0, 0(R1)
	RTS
methodBody.Object.equals:
; ----------- Code de la methode equals dans la classe Object
; Beginning of method instructions:
	LOAD -2(LB), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R1
	RTS
; # end Object
; --------------------------------------------------
;                   Classe Player
; --------------------------------------------------
; # start init
init.Player:
; ----------- Initialisation des champs de Player
	TSTO #1
	BOV stack..overflow_error
	ADDSP #0
	PUSH R2
	LOAD -2(LB), R0
	PUSH R0
	BSR init.Object
	SUBSP #1
	LOAD -2(LB), R1
	LEA 3(GB), R0
	STORE R0, 0(R1)
; field num
;   -> init by exr
	LOAD #1, R2
	LOAD R2, R0
	STORE R0, 1(R1)
	POP R2
	RTS
; # end init
methodBody.Player.changePlayer:
	TSTO #3
	BOV stack..overflow_error
	ADDSP #0
	PUSH R4
	PUSH R3
	PUSH R2
; ----------- Code de la methode changePlayer dans la classe Player
; Beginning of method instructions:
; Assign (0)
	LOAD -2(LB), R2
	LOAD 1(R2), R2
; -
	LOAD #0, R3
	SUB R2, R3
	LOAD R3, R4
	LOAD #3, R2
; +
	ADD R2, R4
; Store assign (1)
	LOAD -2(LB), R2
	STORE R4, 1(R2)
; End assign (1)
return..8:
	POP R2
	POP R3
	POP R4
	RTS
; # start errors
; ---------------------------------------------------
;                Messages d'erreur
; ---------------------------------------------------
io..error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
no..return_error:
	WSTR "Error: Expected a return at the and of a no void method"
	WNL
	ERROR
div..by_zero_error:
	WSTR "Error: Division by zero"
	WNL
	ERROR
mod..by_zero_error:
	WSTR "Error: Modulo by zero"
	WNL
	ERROR
overflow..error:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
dereferencement..null:
	WSTR "Erreur : dereferencement de null"
	WNL
	ERROR
stack..overflow_error:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
; # end errors
