#!/bin/python3

"""
Lance les tests spécifiés, avec trois possibilités :

 - Soit on lance tout
   (commande "tester")

 - Soit on lance les tests notés comme fonctionnant
   (commande "tester working" ou "tester work")

 - Soit on lance les tests notés comme de non-regression
   (commande "tester regression" ou "tester reg")

Ils lance tous les tests se trouvant dans les dossiers spécifiés en valeur de
ALL_CMDS, avec les commandes données en clé de ALL_CMDS. Concrètement,
pour une entrée `"cmd": ["dosser"]`, il lance `cmd dossier`.

Pour connaître quels test sont marqués fonctionnant ou de non-regression,
Tester lis respectivement les fichiers working.txt ou regression.txt, et
y récupère la liste des tests à faire. Dans ce cas, il ajoute en argument
à la commande la liste des fichiers à tester (en plus du dosser, qui est
alors considéré comme le dossier que la commande peut utiliser pour faire
ses tests)
"""

import sys
import os
import subprocess
# import glob

BASEDIR = "./src/test"
ALL_CMDS = {
    "test_lexer": ["deca/lexer/valid"],
    "test_decompile": ["deca/syntax/valid"],
    "test_exec": ["deca/exec/invalid", "deca/exec/valid"],
    "test_run_decac": ["deca/codegen/valid"],
    "test_run_cli": ["deca/cli/valid", "deca/cli/invalid"],
    "test_context_auto": ["deca/context/valid", "deca/context/invalid"]
}

REGRESSION = len(sys.argv) > 1 and sys.argv[1] in ["reg", "regression"]
ALL = len(sys.argv) > 1 and sys.argv[1] in ["all"]
if REGRESSION or ALL:
    COMMANDS = sys.argv[2:]
else:
    COMMANDS = sys.argv[1:]

if REGRESSION:
    print("Running regression tests.")
elif ALL:
    print("Running all tests, even those not supposed to work.")
else:
    print("Running all tests.")


def file_content(file, file_dir):
    assert os.path.isfile(file)
    with open(file) as file:
        lines = file.readlines()
        lines = [os.path.join(file_dir, line.rstrip()) for line in lines]
    return lines


errors = []

for cmd in (ALL_CMDS if COMMANDS == [] else COMMANDS):
    print()
    print(" ===============")
    print("===> Running: ", cmd)
    print(" ===============")

    args = []
    exclude = set()

    for work_dir in ALL_CMDS[cmd]:
        curr_dir = os.path.join(BASEDIR, work_dir)
        print(f"==> Current dir: '{curr_dir}' (command: '{cmd}')")

        if ALL:
            results = subprocess.run([cmd, curr_dir])
        else:
            """exclude_file = os.path.join(curr_dir, "exclude.txt")
            if os.path.isfile(exclude_file):
                    exclude = set(x
                        for x in file_content(exclude_file, curr_dir))"""
            if REGRESSION:
                reg_file = os.path.join(curr_dir, "regression.txt")
                if os.path.isfile(reg_file):
                    args = [
                        file for file in file_content(reg_file, curr_dir)
                        if file not in exclude]
                else:
                    print("No regression.txt, skipping")
                    continue
            """else:
                args = [
                    file for file in glob.glob(os.path.join(curr_dir, "*.txt"))
                    if file not in exclude]"""
            results = subprocess.run([cmd, curr_dir] + args)

        if results.returncode != 0:
            errors.append((results, curr_dir))

print("")
if len(errors) == 0:
    print("Everything went fine !")
else:
    print("Got errors on calls :")
    for err in errors:
        print(
            "-> for directory",
            err[1],
            ", got error when calling",
            err[0].args)
    exit(1)
